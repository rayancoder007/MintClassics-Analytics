So these are my queries for that matter
1) Are there products with high inventory but low sales? How can we optimize the inventory of such products?

select
productCode,
productName,
quantityInStock,
totalOrdered,
(quantityInStock - totalOrdered) as inventoryShortage
FROM
(
   select
   p.productCode,
   p.productName,
   p.quantityInStock,
   SUM(od.quantityOrdered) AS totalOrdered
   from
   retrorides.products as p
   LEFT JOIN
   retrorides.orderdetails as od ON p.productCode = od.productCode
   GROUP BY
   p.productCode,
   p.productName,
   p.quantityInStock
) AS inventory_data
where
(quantityInStock - totalOrdered) > 0
ORDER BY
inventoryShortage DESC; 

2) Are all the warehouses currently in use still necessary? How can we review warehouses that have low or inactive inventory?

select
p.productName,
w.warehouseName,
SUM(p.quantityInStock) as totalInventory
FROM
retrorides.products as p
JOIN
retrorides.warehouses as w on p.warehouseCode = w.warehouseCode
GROUP BY
p.productName, w.warehouseName
ORDER BY
totalInventory asc

3) Inventory storage in Warehouses

select
w.warehouseCode,
w.warehouseName,
SUM(p.quantityInStock) AS totalInventory
FROM
retrorides.warehouses as w
LEFT JOIN
retrorides.products as p on w.warehouseCode = p.warehouseCode
GROUP BY
w.warehouseCode,
w.warehouseName
order by
totalInventory desc

4) Is there a relationship between product prices and their sales levels? How can price adjustments impact sales?

select
p.productCode,
p.productName,
p.buyPrice,
SUM(od.quantityOrdered) as totalOrdered
FROM
retrorides.products as p
LEFT JOIN
retrorides.orderdetails as od on p.productCode = od.productCode
GROUP BY
p.productCode, p.productName, p.buyPrice
order by
buyPrice desc

5) Who are the customers contributing the most to sales? How can sales efforts be focused on these valuable customers?

select
c.customerNumber,
c.customerName,
count(o.orderNumber) as totalSales
FROM
retrorides.customers as c
JOIN
retrorides.orders as o ON c.customerNumber = o.customerNumber
group by
c.customerNumber, c.customerName
ORDER BY
totalSales desc

6) How can the performance of sales employees be evaluated using sales data?

select
e.employeeNumber,
e.lastName,
e.firstName,
e.jobTitle,
SUM(od.priceEach * od.quantityOrdered) AS totalSales
FROM
retrorides.employees as e
LEFT JOIN
retrorides.customers as c on e.employeeNumber = c.salesRepEmployeeNumber
LEFT JOIN
retrorides.orders as o on c.customerNumber = o.customerNumber
LEFT JOIN
retrorides.orderdetails as od on o.orderNumber = od.orderNumber
group by
e.employeeNumber, e.lastName, e.firstName, e.jobTitle
order by
totalSales desc

7) How can customer payment trends be analyzed? What credit risks need to be considered, and how can cash flow be managed?

select
c.customerNumber,
c.customerName,
p.paymentDate,
p.amount as paymentAmount
from
retrorides.customers as c
LEFT JOIN
retrorides.payments as p on c.customerNumber = p.customerNumber
order by
paymentAmount desc

8) How can the performance of various product lines be compared? Which products are the most successful, and which ones need improvement or removal?

select
p.productLine,
pl.textDescription as productLineDescription,
SUM(p.quantityInStock) as totalInventory,
SUM(od.quantityOrdered) as totalSales,
SUM(od.priceEach * od.quantityOrdered) as totalRevenue,
(SUM(od.quantityOrdered) / SUM(p.quantityInStock)) * 100 as salesToInventoryPercentage
FROM
retrorides.products as p
LEFT JOIN
retrorides.productlines as pl on p.productLine = pl.productLine
LEFT JOIN
retrorides.orderdetails as od on p.productCode = od.productCode
GROUP BY
p.productLine, pl.textDescription
order by
salesToInventoryPercentage desc

9) How can the companyâ€™s credit policies be evaluated? Are there any customers with credit issues that need to be addressed?

select
c.customerNumber,
c.customerName,
c.creditLimit,
SUM(p.amount) as totalPayments,
(SUM(p.amount) - c.creditLimit) as creditLimitDifference
FROM
retrorides.customers as c
LEFT JOIN
retrorides.payments as p on c.customerNumber = p.customerNumber
GROUP BY
c.customerNumber, c.creditLimit
HAVING
SUM(p.amount) < c.creditLimit
ORDER BY
totalPayments asc